import streamlit as st
import requests

import warnings
warnings.filterwarnings('ignore')

from utils import preprocess_and_match_vacancy, get_matrix_df
from pdf_parsing import ResumeSkillsFinder
from shpad.shpad import compare_models

def main():
    #st.header("ikanam-ai‚úîÔ∏è", divider='rainbow')
    st.title("–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤ –æ—Ç GeekBrains")
    txt = st.text_area(
        "‚öôÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "–ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º, –∞ —Ç–∞–∫–∂–µ –ø–æ –∏–º–µ—é—â–∏–º—Å—è "
        "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º. –° –ø–æ–º–æ—â—å—é NLP-–º–µ—Ç–æ–¥–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥ "
        "–ø—Ä–æ–≥—Ä–∞–º–º, –∞ —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."
        )

    tab1, tab2, tab3 = st.tabs(["–í–∞–∫–∞–Ω—Å–∏—èüòéüìä", "–í–∞–∫–∞–Ω—Å–∏—è+—Ä–µ–∑—é–º–µüöÄüíª", "–ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑üß†ü§ñ"])
    

    with tab1:
        vacancy_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ö–æ–∂–µ–≥–æ –∫—É—Ä—Å–∞ GeekBrains
        if st.button("–ù–∞–π—Ç–∏ —Å—Ö–æ–∂–∏–π –∫—É—Ä—Å –æ—Ç GeekBrains"):
            data, vacancy = preprocess_and_match_vacancy(vacancy_url=vacancy_url, data_gb_path='data/data_gb_resultv1.csv', data_it_path='data/preprocess_it.csv')
            # –í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:** {vacancy['name']}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏—Ö –≤—ã–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
            if vacancy['key_skills']:
                st.markdown(f"**–°—Ç–µ–∫:** {' , '.join(vacancy['key_skills'])}")
            st.write("---")

            st.subheader("–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:")
            st.markdown(f"**{data.loc[0]['name'].upper()}**")
            score = data.loc[0]['total_score']
            percent = 100 if score <= 0 else round(100 * (score / (score + 1)), 2)
            st.markdown(
                f"<span style='color:green'>{'–°—Ö–æ–∂–µ—Å—Ç—å –ø–æ –ø–µ—Ä–µ–ø–ª–µ–∫—Å–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–æ–≤: '+str(percent)+'%'}</span>",
                unsafe_allow_html=True
            )
            st.markdown(f'<a href="{"https://raw.githubusercontent.com/ikanam-ai/VacancySkillsEstimator/main/logo.jpg"}"><img src="{"https://raw.githubusercontent.com/ikanam-ai/VacancySkillsEstimator/main/logo.jpg"}" alt="Foo" width="500" height="250"/></a>', unsafe_allow_html=True)
            st.caption(f"**GeekBrains ‚Äî –ª–∏–¥–µ—Ä –≤ —Å—Ñ–µ—Ä–µ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è**")
            st.markdown(f"**–°—Ç–µ–∫:** {' , '.join(data.loc[0]['stack'])}")

            # –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{data.loc[0]['summary']}")

            # –í—ã–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
            st.markdown(f"**–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:** [{data.loc[0]['url']}]({data.loc[0]['url']})")

            st.write("---")

            st.subheader("–ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!")

            # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
            col1, col2, col3 = st.columns(3)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            def display_course_info(column, course_data):
                with column:
                    example = 'https://kursplus.ru/wp-content/uploads/stm_lms_avatars/stm_lms_avatar10.jpg?v=1645100697'
                    st.markdown(f'<a href="{course_data["url"]}"><img src="{example}" alt="Foo" width="150" height="150"/></a>', unsafe_allow_html=True)
                    st.markdown(f"**{course_data['name']}**")
                    score = course_data['total_score']
                    percent = 100 if score <= 0 else round(100 * (score / (score + 1)), 2)
                    st.markdown(f"<span style='color:green'>–°—Ö–æ–∂–µ—Å—Ç—å: {percent}%</span>", unsafe_allow_html=True)
                    st.write(course_data['url'])

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ç–æ—Ä–æ–º –∫—É—Ä—Å–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            display_course_info(col1, data.loc[1])

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ—Ç—å–µ–º –∫—É—Ä—Å–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            display_course_info(col2, data.loc[2])

            display_course_info(col3, data.loc[3])
            st.write("---")

            
            st.subheader("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")
            txt = st.text_area(
            "‚öôÔ∏è –ö–∏–ª–ª–µ—Ä-—Ñ–∏—á–∞!",
            "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ "
            "—ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é NLP —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è –≤ –∫—É—Ä—Å–∞—Ö "
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å "
            )

            matrix_df = get_matrix_df(vacancy_url, 'data/data_gb_resultv1.csv')

            st.dataframe(matrix_df, use_container_width=True)

            


    with tab2:
        vacancy_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ")
        resume_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ —Ä–µ–∑—é–º–µ: ")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ö–æ–∂–µ–≥–æ –∫—É—Ä—Å–∞ GeekBrains
        if st.button("–ù–∞–π—Ç–∏ —Å—Ö–æ–∂–∏–π –∫—É—Ä—Å –æ—Ç GeekBrains "):
            data, vacancy = preprocess_and_match_vacancy(vacancy_url=vacancy_url, data_gb_path='data/data_gb_resultv1.csv', data_it_path='data/preprocess_it.csv')

            finder = ResumeSkillsFinder()
            all_skills = []

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫
            for stack in data['stack']:
                all_skills.extend(stack)
            finder.skills = list(set(all_skills))

            def download_pdf(url, destination):
                response = requests.get(url)
                if response.status_code == 200:
                    with open(destination, 'wb') as f:
                        f.write(response.content)
                    return True
                else:
                    return False

            if download_pdf(resume_url, 'resume.pdf'):
                print("PDF downloaded successfully.")
            else:
                print("Failed to download PDF.")

            # –í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:** {vacancy['name']}")


            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏—Ö –≤—ã–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
            if vacancy['key_skills']:
                st.markdown(f"**–°—Ç–µ–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:** {' , '.join(vacancy['key_skills'])}")

            found_skills = finder.find_skills_in_resume('resume.pdf')
            st.markdown(f"**–°—Ç–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {' , '.join(found_skills)}")

            vacancy['key_skills'] = list(set(vacancy['key_skills']) - set(found_skills))


            st.write("---")

            st.subheader("–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:")
            st.markdown(f"**{data.loc[0]['name'].upper()}**")
            score = data.loc[0]['total_score']
            percent = 100 if score <= 0 else round(100 * (score / (score + 1)), 2)
            st.markdown(
                f"<span style='color:green'>–°—Ö–æ–∂–µ—Å—Ç—å –ø–æ –ø–µ—Ä–µ–ø–ª–µ–∫—Å–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–æ–≤: <b>{percent}%</b></span>",
                unsafe_allow_html=True
            )
            skills1 = [k.lower() for k in found_skills]
            skills2 =  list(set([k.lower() for k in found_skills] + [k.lower() for k in data.loc[0]['stack']]))
            difference = compare_models(skills1, skills2)
            st.markdown(
                f"<span style='color:green'>–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞ (—Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞): <b>+{int(difference)} —Ä—É–±.</b></span>",
                unsafe_allow_html=True
            )
            st.markdown(f'<a href="{"https://raw.githubusercontent.com/ikanam-ai/VacancySkillsEstimator/main/logo.jpg"}"><img src="{"https://raw.githubusercontent.com/ikanam-ai/VacancySkillsEstimator/main/logo.jpg"}" alt="Foo" width="500" height="250"/></a>', unsafe_allow_html=True)
            st.caption(f"**GeekBrains ‚Äî –ª–∏–¥–µ—Ä –≤ —Å—Ñ–µ—Ä–µ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏**")
            st.markdown(f"**–°—Ç–µ–∫:** {' , '.join(data.loc[0]['stack'])}")

            # –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{data.loc[0]['summary']}")

            # –í—ã–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
            st.markdown(f"**–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:** [{data.loc[0]['url']}]({data.loc[0]['url']})")

            st.write("---")

            st.subheader("–ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!")

            # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
            col1, col2, col3 = st.columns(3)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            def display_course_info(column, course_data):
                with column:
                    example = 'https://kursplus.ru/wp-content/uploads/stm_lms_avatars/stm_lms_avatar10.jpg?v=1645100697'
                    st.markdown(f'<a href="{course_data["url"]}"><img src="{example}" alt="Foo" width="150" height="150"/></a>', unsafe_allow_html=True)
                    st.markdown(f"**{course_data['name']}**")
                    score = course_data['total_score']
                    percent = 100 if score <= 0 else round(100 * (score / (score + 1)), 2)
                    st.markdown(f"<span style='color:green'>–°—Ö–æ–∂–µ—Å—Ç—å: {percent}%</span>", unsafe_allow_html=True)
                    skills1 = [k.lower() for k in found_skills]
                    skills2 =  list(set([k.lower() for k in found_skills] + [k.lower() for k in course_data['stack']]))
                    difference = compare_models(skills1, skills2)
                    st.markdown(
                        f"<span style='color:green'>–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã: <b>+{int(difference)} —Ä—É–±.</b></span>",
                        unsafe_allow_html=True
                    )
                    st.write(course_data['url'])



            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ç–æ—Ä–æ–º –∫—É—Ä—Å–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            display_course_info(col1, data.loc[1])

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ—Ç—å–µ–º –∫—É—Ä—Å–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            display_course_info(col2, data.loc[2])

            display_course_info(col3, data.loc[3])
            st.write("---")

            st.subheader("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")
            txt = st.text_area(
            "‚öôÔ∏è –ö–∏–ª–ª–µ—Ä-—Ñ–∏—á–∞!",
            "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ –≤–∞–∫–∞–Ω–∞—Å–∏–∏ "
            "—ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é NLP —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è –≤ –∫—É—Ä—Å–∞—Ö "
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å "
            )

            matrix_df = get_matrix_df(vacancy_url, 'data/data_gb_resultv1.csv')

            st.dataframe(matrix_df, use_container_width=True)

    with tab3:
        st.subheader('–ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (t-SNE Visualization with Clusters) –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ it.csv')

if __name__ == "__main__":
    main()
